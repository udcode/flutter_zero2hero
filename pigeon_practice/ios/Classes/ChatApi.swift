// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Message {
  var id: String? = nil
  var content: String? = nil
  var sender: String? = nil
  var timestamp: Int64? = nil
  var status: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Message? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let content: String? = nilOrValue(pigeonVar_list[1])
    let sender: String? = nilOrValue(pigeonVar_list[2])
    let timestamp: Int64? = nilOrValue(pigeonVar_list[3])
    let status: String? = nilOrValue(pigeonVar_list[4])

    return Message(
      id: id,
      content: content,
      sender: sender,
      timestamp: timestamp,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      content,
      sender,
      timestamp,
      status,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Contact {
  var id: String? = nil
  var name: String? = nil
  var phoneNumber: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Contact? {
    let id: String? = nilOrValue(pigeonVar_list[0])
    let name: String? = nilOrValue(pigeonVar_list[1])
    let phoneNumber: String? = nilOrValue(pigeonVar_list[2])

    return Contact(
      id: id,
      name: name,
      phoneNumber: phoneNumber
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      phoneNumber,
    ]
  }
}

private class ChatApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return Message.fromList(self.readValue() as! [Any?])
    case 130:
      return Contact.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ChatApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Message {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Contact {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ChatApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ChatApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ChatApiPigeonCodecWriter(data: data)
  }
}

class ChatApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ChatApiPigeonCodec(readerWriter: ChatApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ChatApi {
  func getMessages(completion: @escaping (Result<[Message], Error>) -> Void)
  func sendMessage(message: Message, completion: @escaping (Result<Void, Error>) -> Void)
  func getContacts(completion: @escaping (Result<[Contact], Error>) -> Void)
  func saveMessage(message: Message, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ChatApiSetup {
  static var codec: FlutterStandardMessageCodec { ChatApiPigeonCodec.shared }
  /// Sets up an instance of `ChatApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ChatApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_practice.ChatApi.getMessages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMessagesChannel.setMessageHandler { _, reply in
        api.getMessages { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getMessagesChannel.setMessageHandler(nil)
    }
    let sendMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_practice.ChatApi.sendMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! Message
        api.sendMessage(message: messageArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendMessageChannel.setMessageHandler(nil)
    }
    let getContactsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_practice.ChatApi.getContacts\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getContactsChannel.setMessageHandler { _, reply in
        api.getContacts { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getContactsChannel.setMessageHandler(nil)
    }
    let saveMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_practice.ChatApi.saveMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      saveMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! Message
        api.saveMessage(message: messageArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      saveMessageChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ChatCallbackProtocol {
  func onNewMessage(message messageArg: Message, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onMessageStatusChanged(messageId messageIdArg: String, status statusArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class ChatCallback: ChatCallbackProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: ChatApiPigeonCodec {
    return ChatApiPigeonCodec.shared
  }
  func onNewMessage(message messageArg: Message, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_practice.ChatCallback.onNewMessage\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([messageArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onMessageStatusChanged(messageId messageIdArg: String, status statusArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_practice.ChatCallback.onMessageStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([messageIdArg, statusArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
